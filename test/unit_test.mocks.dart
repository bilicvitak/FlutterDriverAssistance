// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_driver_assistance/test/unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter/material.dart' as _i6;
import 'package:flutter_driver_assistance/models/event.dart' as _i9;
import 'package:flutter_driver_assistance/models/event_type.dart' as _i10;
import 'package:flutter_driver_assistance/services/dio_service.dart' as _i4;
import 'package:flutter_driver_assistance/services/driver_assistance_service.dart'
    as _i7;
import 'package:flutter_driver_assistance/services/location_service.dart'
    as _i11;
import 'package:flutter_driver_assistance/services/logger_service.dart' as _i5;
import 'package:geolocator/geolocator.dart' as _i12;
import 'package:get/get.dart' as _i3;
import 'package:location/location.dart' as _i13;
import 'package:logger_fork/logger_fork.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInternalFinalCallback_1<T> extends _i1.SmartFake
    implements _i3.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDioService_2 extends _i1.SmartFake implements _i4.DioService {
  _FakeDioService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoggerService_3 extends _i1.SmartFake implements _i5.LoggerService {
  _FakeLoggerService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerService extends _i1.Mock implements _i5.LoggerService {
  MockLoggerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);
  @override
  set logger(_i2.Logger? _logger) => super.noSuchMethod(
        Invocation.setter(
          #logger,
          _logger,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i3.InternalFinalCallback<void>);
  @override
  _i3.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i3.InternalFinalCallback<void>);
  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void v(dynamic value) => super.noSuchMethod(
        Invocation.method(
          #v,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void d(dynamic value) => super.noSuchMethod(
        Invocation.method(
          #d,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void i(dynamic value) => super.noSuchMethod(
        Invocation.method(
          #i,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void w(dynamic value) => super.noSuchMethod(
        Invocation.method(
          #w,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void e(dynamic value) => super.noSuchMethod(
        Invocation.method(
          #e,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void wtf(dynamic value) => super.noSuchMethod(
        Invocation.method(
          #wtf,
          [value],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logJson(
    String? data, {
    bool? isError = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #logJson,
          [data],
          {#isError: isError},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void openLogger(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #openLogger,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DriverAssistanceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDriverAssistanceService extends _i1.Mock
    implements _i7.DriverAssistanceService {
  MockDriverAssistanceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DioService get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDioService_2(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i4.DioService);
  @override
  _i5.LoggerService get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLoggerService_3(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.LoggerService);
  @override
  _i3.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i3.InternalFinalCallback<void>);
  @override
  _i3.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i3.InternalFinalCallback<void>);
  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i8.Future<_i9.Event?> createEvent(_i9.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #createEvent,
          [event],
        ),
        returnValue: _i8.Future<_i9.Event?>.value(),
      ) as _i8.Future<_i9.Event?>);
  @override
  _i8.Future<List<_i9.Event>?> getEvents(
    double? lat,
    double? long,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEvents,
          [
            lat,
            long,
          ],
        ),
        returnValue: _i8.Future<List<_i9.Event>?>.value(),
      ) as _i8.Future<List<_i9.Event>?>);
  @override
  _i8.Future<List<_i10.EventType>?> getEventTypes() => (super.noSuchMethod(
        Invocation.method(
          #getEventTypes,
          [],
        ),
        returnValue: _i8.Future<List<_i10.EventType>?>.value(),
      ) as _i8.Future<List<_i10.EventType>?>);
  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i11.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.LoggerService get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLoggerService_3(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i5.LoggerService);
  @override
  _i3.InternalFinalCallback<void> get onStart => (super.noSuchMethod(
        Invocation.getter(#onStart),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onStart),
        ),
      ) as _i3.InternalFinalCallback<void>);
  @override
  _i3.InternalFinalCallback<void> get onDelete => (super.noSuchMethod(
        Invocation.getter(#onDelete),
        returnValue: _FakeInternalFinalCallback_1<void>(
          this,
          Invocation.getter(#onDelete),
        ),
      ) as _i3.InternalFinalCallback<void>);
  @override
  bool get initialized => (super.noSuchMethod(
        Invocation.getter(#initialized),
        returnValue: false,
      ) as bool);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  _i8.Future<_i12.Position?> getLocationWithGeolocatorPackage() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationWithGeolocatorPackage,
          [],
        ),
        returnValue: _i8.Future<_i12.Position?>.value(),
      ) as _i8.Future<_i12.Position?>);
  @override
  _i8.Future<_i13.LocationData?> getLocationWithLocationPackage() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocationWithLocationPackage,
          [],
        ),
        returnValue: _i8.Future<_i13.LocationData?>.value(),
      ) as _i8.Future<_i13.LocationData?>);
  @override
  void onInit() => super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onReady() => super.noSuchMethod(
        Invocation.method(
          #onReady,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onClose() => super.noSuchMethod(
        Invocation.method(
          #onClose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void $configureLifeCycle() => super.noSuchMethod(
        Invocation.method(
          #$configureLifeCycle,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
